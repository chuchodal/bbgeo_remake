
boolean[][] briques = new boolean[9][7];

void main(){

	reset(3, 4);

	//Création et remplissage initial du tableau contenant les briques
	for(int i = 0; i < briques.length; i++){
		for(int j = 0; j < briques[0].length; j++){
			briques[i][j] = false;
		}
	}
	finDeTour();

	//Entrée dans la boucle principale
	boolean continuer = true;
	while(continuer){
		for(int i = 0; i < briques.length; i++){
			for(int j = 0; j < briques[0].length; j++){
				if(briques[i][j]) setPixel(3-j,4-i, "red");
				else{
					setPixel(3-j,4-i, "white");
				}
			}
		}
		sleep(100);
			if(!finDeTour()){
				continuer = false;
			}
	}
	
}

boolean finDeTour(){
	//On abaisse toutes les briques d'une ligne, et on genere la ligne du dessus
	//Si la ligne du bas n,'est pas vide avant dêtre abaissée, game over
	boolean perdu = false;
	for(int i = briques.length-1; i >= 0; i--){
		for(int j = 0; j < briques[0].length; j++){
			if(i == briques.length-1 && briques[i][j]){
				return false;
			}
			if(i != 0){
				//On copie les briques de la ligne au dessus si ce n'est pas la ligne tout au dessus
				briques[i][j] = briques[i-1][j];
			}
			else {
				//sinon , on genere une ligne.
				briques[i][j] = briqueAuHasard();
				
			}
		}
	}
	return true;
}

boolean briqueAuHasard(){
	//Retourne true ou false (une chance sur 2?)
	return random() > 0.5;
}
;